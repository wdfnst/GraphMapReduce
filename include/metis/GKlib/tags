GKASSERT	gk_macros.h	/^#define GKASSERT(expr)                            /
GKASSERTP	gk_macros.h	/^#define GKASSERTP(expr,msg)                       /
GKCUASSERT	gk_macros.h	/^#define GKCUASSERT(expr)                          /
GKCUASSERTP	gk_macros.h	/^#define GKCUASSERTP(expr,msg)                     /
GKSETJMP	gk_macros.h	/^#define GKSETJMP() (setjmp(gk_return_to_entry))$/
GK_MKALLOC	gk_mkmemory.h	/^#define GK_MKALLOC(PRFX, TYPE)\\$/
GK_MKALLOC_PROTO	gk_mkmemory.h	/^#define GK_MKALLOC_PROTO(PRFX, TYPE)\\$/
GK_MKARRAY2CSR	gk_mkutils.h	/^#define GK_MKARRAY2CSR(PRFX, TYPE)\\$/
GK_MKARRAY2CSR_PROTO	gk_mkutils.h	/^#define GK_MKARRAY2CSR_PROTO(PRFX, TYPE)\\$/
GK_MKBLAS	gk_mkblas.h	/^#define GK_MKBLAS(PRFX, TYPE, OUTTYPE) \\$/
GK_MKBLAS_PROTO	gk_mkblas.h	/^#define GK_MKBLAS_PROTO(PRFX, TYPE, OUTTYPE) \\$/
GK_MKKEYVALUE_T	gk_struct.h	/^#define GK_MKKEYVALUE_T(NAME, KEYTYPE, VALTYPE) \\/
GK_MKPQUEUE	gk_mkpqueue.h	/^#define GK_MKPQUEUE(FPRFX, PQT, KVT, KT, VT, KVMAL/
GK_MKPQUEUE2	gk_mkpqueue2.h	/^#define GK_MKPQUEUE2(FPRFX, PQT, KT, VT, KMALLOC, /
GK_MKPQUEUE2_PROTO	gk_mkpqueue2.h	/^#define GK_MKPQUEUE2_PROTO(FPRFX, PQT, KT, VT)\\$/
GK_MKPQUEUE_PROTO	gk_mkpqueue.h	/^#define GK_MKPQUEUE_PROTO(FPRFX, PQT, KT, VT)\\$/
GK_MKPQUEUE_T	gk_struct.h	/^GK_MKPQUEUE_T(gk_ipq_t,    gk_ikv_t)$/
GK_MKQSORT	gk_mksort.h	/^#define GK_MKQSORT(GKQSORT_TYPE,GKQSORT_BASE,GKQSO/
GK_MKRANDOM	gk_mkrandom.h	/^#define GK_MKRANDOM(FPRFX, RNGT, VALT)\\$/
GK_MKRANDOM_PROTO	gk_mkrandom.h	/^#define GK_MKRANDOM_PROTO(FPRFX, RNGT, VALT)\\$/
IFSET	gk_macros.h	/^#define IFSET(a, flag, cmd) if ((a)&(flag)) (cmd);/
INC_DEC	gk_macros.h	/^#define INC_DEC(a, b, val) do {(a) += (val); (b) -/
INT16_C	ms_stdint.h	/^#define INT16_C(val) val##i16$/
INT32_C	ms_stdint.h	/^#define INT32_C(val) val##i32$/
INT64_C	ms_stdint.h	/^#define INT64_C(val) val##i64$/
INT8_C	ms_stdint.h	/^#define INT8_C(val)  val##i8$/
MAKECSR	gk_macros.h	/^#define MAKECSR(i, n, a) \\$/
RandomInRange	gk_macros.h	/^#define RandomInRange(u) ((int) (ONEOVERRANDMAX*(u/
SHIFTCSR	gk_macros.h	/^#define SHIFTCSR(i, n, a) \\$/
S_ISBLK	ms_stat.h	/^#define S_ISBLK(mode)    __S_ISTYPE((mode), S_IFBL/
S_ISCHR	ms_stat.h	/^#define S_ISCHR(mode)    __S_ISTYPE((mode), S_IFCH/
S_ISDIR	ms_stat.h	/^#define S_ISDIR(mode)    __S_ISTYPE((mode), S_IFDI/
S_ISREG	ms_stat.h	/^#define S_ISREG(mode)    __S_ISTYPE((mode), S_IFRE/
UINT16_C	ms_stdint.h	/^#define UINT16_C(val) val##ui16$/
UINT32_C	ms_stdint.h	/^#define UINT32_C(val) val##ui32$/
UINT64_C	ms_stdint.h	/^#define UINT64_C(val) val##ui64$/
UINT8_C	ms_stdint.h	/^#define UINT8_C(val)  val##ui8$/
_GKQSORT_POP	gk_mksort.h	/^#define	_GKQSORT_POP(low, high, top)  ((--top, (lo/
_GKQSORT_PUSH	gk_mksort.h	/^#define _GKQSORT_PUSH(top, low, high) (((top->_lo /
_GKQSORT_SWAP	gk_mksort.h	/^#define _GKQSORT_SWAP(a, b, t) ((void)((t = *a), (/
__S_ISTYPE	ms_stat.h	/^#define __S_ISTYPE(mode, mask)  (((mode) & S_IFMT)/
active_reg_t	gkregex.h	/^typedef unsigned long int active_reg_t;$/
atom	gk_struct.h	/^} atom;$/
center_of_mass	gk_struct.h	/^} center_of_mass;$/
div	ms_inttypes.h	/^\/\/ This is modified version of div() function fr/
draft	ms_inttypes.h	/^\/\/ Based on ISO\/IEC 9899:TC2 Committee draft (M/
gk_HTable_t	gk_struct.h	/^} gk_HTable_t;$/
gk_SWAP	gk_macros.h	/^#define gk_SWAP(a, b, tmp) do {(tmp) = (a); (a) = /
gk_StringMap_t	gk_struct.h	/^} gk_StringMap_t;$/
gk_Tokens_t	gk_struct.h	/^} gk_Tokens_t;$/
gk_abs	gk_macros.h	/^#define gk_abs(x) ((x) >= 0 ? (x) : -(x))$/
gk_clearcputimer	gk_macros.h	/^#define gk_clearcputimer(tmr) (tmr = 0.0)$/
gk_clearwctimer	gk_macros.h	/^#define gk_clearwctimer(tmr) (tmr = 0.0)$/
gk_csr_t	gk_struct.h	/^} gk_csr_t;$/
gk_dreal_t	gk_types.h	/^typedef double          gk_dreal_t;       \/* doub/
gk_getcputimer	gk_macros.h	/^#define gk_getcputimer(tmr)   (tmr)$/
gk_getwctimer	gk_macros.h	/^#define gk_getwctimer(tmr)   (tmr)$/
gk_graph_t	gk_struct.h	/^} gk_graph_t;$/
gk_i2cc2i_t	gk_struct.h	/^} gk_i2cc2i_t;$/
gk_idx_t	gk_types.h	/^typedef ssize_t         gk_idx_t;         \/* inde/
gk_int_t	gk_types.h	/^typedef int32_t         gk_int_t;         \/* inte/
gk_long_t	gk_types.h	/^typedef int64_t         gk_long_t;        \/* long/
gk_max	gk_macros.h	/^#define gk_max(a, b) ((a) >= (b) ? (a) : (b))$/
gk_max3	gk_macros.h	/^#define gk_max3(a, b, c) ((a) >= (b) && (a) >= (c)/
gk_mcore_t	gk_struct.h	/^} gk_mcore_t;$/
gk_min	gk_macros.h	/^#define gk_min(a, b) ((a) >= (b) ? (b) : (a))$/
gk_mop_t	gk_struct.h	/^} gk_mop_t;$/
gk_option	gk_getopt.h	/^struct gk_option {$/
gk_real_t	gk_types.h	/^typedef float           gk_real_t;        \/* real/
gk_seq_t	gk_struct.h	/^} gk_seq_t;$/
gk_sigcatch	gk_macros.h	/^#define gk_sigcatch() (setjmp(gk_jbufs[gk_cur_jbuf/
gk_startcputimer	gk_macros.h	/^#define gk_startcputimer(tmr) (tmr -= gk_CPUSecond/
gk_startwctimer	gk_macros.h	/^#define gk_startwctimer(tmr) (tmr -= gk_WClockSeco/
gk_stopcputimer	gk_macros.h	/^#define gk_stopcputimer(tmr)  (tmr += gk_CPUSecond/
gk_stopwctimer	gk_macros.h	/^#define gk_stopwctimer(tmr)  (tmr += gk_WClockSeco/
gk_str_t	gk_struct.h	/^} gk_str_t;$/
gk_uint_t	gk_types.h	/^typedef uint32_t        gk_uint_t;        \/* unsi/
gk_ulong_t	gk_types.h	/^typedef uint64_t        gk_ulong_t;       \/* unsi/
gk_wclock_t	gk_types.h	/^typedef double          gk_wclock_t;	  \/* wall-cl/
int16_t	ms_stdint.h	/^typedef __int16           int16_t;$/
int32_t	ms_stdint.h	/^typedef __int32           int32_t;$/
int64_t	ms_stdint.h	/^typedef __int64           int64_t;$/
int8_t	ms_stdint.h	/^typedef __int8            int8_t;$/
int_fast16_t	ms_stdint.h	/^typedef int16_t   int_fast16_t;$/
int_fast32_t	ms_stdint.h	/^typedef int32_t   int_fast32_t;$/
int_fast64_t	ms_stdint.h	/^typedef int64_t   int_fast64_t;$/
int_fast8_t	ms_stdint.h	/^typedef int8_t    int_fast8_t;$/
int_least16_t	ms_stdint.h	/^typedef int16_t   int_least16_t;$/
int_least32_t	ms_stdint.h	/^typedef int32_t   int_least32_t;$/
int_least64_t	ms_stdint.h	/^typedef int64_t   int_least64_t;$/
int_least8_t	ms_stdint.h	/^typedef int8_t    int_least8_t;$/
intmax_t	ms_stdint.h	/^typedef int64_t   intmax_t;$/
intptr_t	ms_stdint.h	/^   typedef __int64           intptr_t;$/
pdbf	gk_struct.h	/^} pdbf;$/
reg_errcode_t	gkregex.h	/^} reg_errcode_t;$/
reg_syntax_t	gkregex.h	/^typedef unsigned long int reg_syntax_t;$/
regex_t	gkregex.h	/^typedef struct re_pattern_buffer regex_t;$/
regmatch_t	gkregex.h	/^} regmatch_t;$/
regoff_t	gkregex.h	/^typedef int regoff_t;$/
rint	gk_arch.h	/^#define rint(x) ((int)((x)+0.5))  $/
s_reg_t	gkregex.h	/^typedef long int s_reg_t;$/
sign	gk_macros.h	/^#define sign(a, b) ((a >= 0 ? b : -b))$/
ssize_t	gk_arch.h	/^typedef ptrdiff_t ssize_t;$/
uint16_t	ms_stdint.h	/^typedef unsigned __int16  uint16_t;$/
uint32_t	ms_stdint.h	/^typedef unsigned __int32  uint32_t;$/
uint64_t	ms_stdint.h	/^typedef unsigned __int64  uint64_t;$/
uint8_t	ms_stdint.h	/^typedef unsigned __int8   uint8_t;$/
uint_fast16_t	ms_stdint.h	/^typedef uint16_t  uint_fast16_t;$/
uint_fast32_t	ms_stdint.h	/^typedef uint32_t  uint_fast32_t;$/
uint_fast64_t	ms_stdint.h	/^typedef uint64_t  uint_fast64_t;$/
uint_fast8_t	ms_stdint.h	/^typedef uint8_t   uint_fast8_t;$/
uint_least16_t	ms_stdint.h	/^typedef uint16_t  uint_least16_t;$/
uint_least32_t	ms_stdint.h	/^typedef uint32_t  uint_least32_t;$/
uint_least64_t	ms_stdint.h	/^typedef uint64_t  uint_least64_t;$/
uint_least8_t	ms_stdint.h	/^typedef uint8_t   uint_least8_t;$/
uintmax_t	ms_stdint.h	/^typedef uint64_t  uintmax_t;$/
uintptr_t	ms_stdint.h	/^   typedef unsigned __int64  uintptr_t;$/
